//
// UtilsVK.cpp
//

#include "UtilsVK.hpp"

namespace MrQ2
{

const char * VulkanResultToString(const VkResult result)
{
    #define CASE_(x) case x : return #x
    switch (result)
    {
    CASE_(VK_SUCCESS);
    CASE_(VK_NOT_READY);
    CASE_(VK_TIMEOUT);
    CASE_(VK_EVENT_SET);
    CASE_(VK_EVENT_RESET);
    CASE_(VK_INCOMPLETE);
    CASE_(VK_ERROR_OUT_OF_HOST_MEMORY);
    CASE_(VK_ERROR_OUT_OF_DEVICE_MEMORY);
    CASE_(VK_ERROR_INITIALIZATION_FAILED);
    CASE_(VK_ERROR_DEVICE_LOST);
    CASE_(VK_ERROR_MEMORY_MAP_FAILED);
    CASE_(VK_ERROR_LAYER_NOT_PRESENT);
    CASE_(VK_ERROR_EXTENSION_NOT_PRESENT);
    CASE_(VK_ERROR_FEATURE_NOT_PRESENT);
    CASE_(VK_ERROR_INCOMPATIBLE_DRIVER);
    CASE_(VK_ERROR_TOO_MANY_OBJECTS);
    CASE_(VK_ERROR_FORMAT_NOT_SUPPORTED);
    CASE_(VK_ERROR_FRAGMENTED_POOL);
    CASE_(VK_ERROR_SURFACE_LOST_KHR);
    CASE_(VK_ERROR_NATIVE_WINDOW_IN_USE_KHR);
    CASE_(VK_SUBOPTIMAL_KHR);
    CASE_(VK_ERROR_OUT_OF_DATE_KHR);
    CASE_(VK_ERROR_INCOMPATIBLE_DISPLAY_KHR);
    CASE_(VK_ERROR_VALIDATION_FAILED_EXT);
    CASE_(VK_ERROR_INVALID_SHADER_NV);
    CASE_(VK_ERROR_OUT_OF_POOL_MEMORY);
    CASE_(VK_ERROR_INVALID_EXTERNAL_HANDLE);
    CASE_(VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT);
    CASE_(VK_ERROR_FRAGMENTATION_EXT);
    CASE_(VK_ERROR_NOT_PERMITTED_EXT);
    CASE_(VK_ERROR_INVALID_DEVICE_ADDRESS_EXT);
    CASE_(VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT);
    default : return "UNKNOWN_VK_RESULT";
    } // switch
    #undef CASE_
}

} // MrQ2
